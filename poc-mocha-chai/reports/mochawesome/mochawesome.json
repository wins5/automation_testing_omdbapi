{
  "stats": {
    "suites": 1,
    "tests": 10,
    "passes": 10,
    "pending": 0,
    "failures": 0,
    "start": "2020-03-13T09:28:18.756Z",
    "end": "2020-03-13T09:28:24.159Z",
    "duration": 5403,
    "testsRegistered": 10,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "8569f763-7806-48fa-b83a-3f8a7f6ec143",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "183d36b1-c3f7-427e-989f-250c5f3306b3",
        "title": "OMDb API",
        "fullFile": "/home/hp955514/Downloads/poc-mocha-chai/api/test/omdbapi-test.js",
        "file": "/api/test/omdbapi-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "@get Send Request to Search Movie on OMDb API",
            "fullTitle": "OMDb API @get Send Request to Search Movie on OMDb API",
            "timedOut": false,
            "duration": 441,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getOMDbMovie(apiKey, keySearch);\nassert(response.status).to.equal(200);\nassert(response.body.Response).to.equal('True');\nassert(response.body.search, 'galaxy');\nassert(response.body.search, 'Title');\nassert(response.body.search, 'Year');\nassert(response.body.search, 'imdbID');\nassert(response.body.search, 'Type');\nassert(response.body.search, 'Poster');",
            "err": {},
            "isRoot": false,
            "uuid": "b1480526-4282-4b31-a80d-1a9eb1d46b1e",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "@get Send Request Without Input the API Key",
            "fullTitle": "OMDb API @get Send Request Without Input the API Key",
            "timedOut": false,
            "duration": 567,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getOMDbMovie('', keySearch);\nassert(response.status).to.equal(401, response.body.Error);\nassert(response.body.Response).to.equal('False');\nassert(response.body.Error).to.equal('No API key provided.');",
            "err": {},
            "isRoot": false,
            "uuid": "615424be-4af6-447f-8d43-62d2e59afe15",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "@get Send Request With Input the Invalid API Key",
            "fullTitle": "OMDb API @get Send Request With Input the Invalid API Key",
            "timedOut": false,
            "duration": 625,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getOMDbMovie(invalidAPIKey, keySearch);\nassert(response.status).to.equal(401, response.body.Error);\nassert(response.body.Response).to.equal('False');\nassert(response.body.Error).to.equal('Invalid API key!');",
            "err": {},
            "isRoot": false,
            "uuid": "553edc86-7bb1-44cf-9da9-65729f094c7f",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "@get Send Request Without Input the Key of Search",
            "fullTitle": "OMDb API @get Send Request Without Input the Key of Search",
            "timedOut": false,
            "duration": 138,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getOMDbMovie(apiKey, '');\nassert(response.status).to.equal(200, response.body.Error);\nassert(response.body.Response).to.equal('False');\nassert(response.body.Error).to.equal('Something went wrong.');",
            "err": {},
            "isRoot": false,
            "uuid": "e5a74824-8f85-4fdf-8c70-a9fa1105d3fc",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "@get Send Request to Search a Movie with One Character Keyword",
            "fullTitle": "OMDb API @get Send Request to Search a Movie with One Character Keyword",
            "timedOut": false,
            "duration": 589,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getOMDbMovie(apiKey, oneCharSearch);\nassert(response.status).to.equal(200, response.body.Error);\nassert(response.body.Response).to.equal('False');\nassert(response.body.Error).to.equal('Too many results.');",
            "err": {},
            "isRoot": false,
            "uuid": "29c23b62-4b8b-4250-8b0d-d32eb1efe975",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "@get Send Request to Search a Movie with Symbol Keyword",
            "fullTitle": "OMDb API @get Send Request to Search a Movie with Symbol Keyword",
            "timedOut": false,
            "duration": 625,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getOMDbMovie(apiKey, symbolSearch);\nassert(response.status).to.equal(200, response.body.Error);\nassert(response.body.Response).to.equal('False');\nassert(response.body.Error).to.equal('Too many results.');",
            "err": {},
            "isRoot": false,
            "uuid": "64982ed1-1bcf-403b-b13f-dd116da86c4a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "@get Send Request to Search a Movie with Random Word Keyword",
            "fullTitle": "OMDb API @get Send Request to Search a Movie with Random Word Keyword",
            "timedOut": false,
            "duration": 625,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getOMDbMovie(apiKey, randomSearch);\nassert(response.status).to.equal(200, response.body.Error);\nassert(response.body.Response).to.equal('False');\nassert(response.body.Error).to.equal('Movie not found!');",
            "err": {},
            "isRoot": false,
            "uuid": "c6e4c96b-c8b8-4ff1-85ec-5623cd66b97c",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "@get Send Request Without Input the API Key and Keyword",
            "fullTitle": "OMDb API @get Send Request Without Input the API Key and Keyword",
            "timedOut": false,
            "duration": 520,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getOMDbMovie('', '');\nassert(response.status).to.equal(401, response.body.Error);\nassert(response.body.Response).to.equal('False');\nassert(response.body.Error).to.equal('No API key provided.');",
            "err": {},
            "isRoot": false,
            "uuid": "e2d9d3db-d064-4bd0-a8f5-0b04354ca6d0",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "@get Send Request Without Input the API Key and Input Invalid Keyword",
            "fullTitle": "OMDb API @get Send Request Without Input the API Key and Input Invalid Keyword",
            "timedOut": false,
            "duration": 625,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getOMDbMovie('', randomSearch);\nassert(response.status).to.equal(401, response.body.Error);\nassert(response.body.Response).to.equal('False');\nassert(response.body.Error).to.equal('No API key provided.');",
            "err": {},
            "isRoot": false,
            "uuid": "00ad8e19-8bd9-4393-b950-b4a37dedfae3",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "@get Send Request With Capital Letters for the API Key and Keyword",
            "fullTitle": "OMDb API @get Send Request With Capital Letters for the API Key and Keyword",
            "timedOut": false,
            "duration": 625,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getOMDbMovie(apiKeyCapital, keySearchCapital);\nassert(response.status).to.equal(200);\nassert(response.body.Response).to.equal('True');\nassert(response.body.search, 'galaxy');",
            "err": {},
            "isRoot": false,
            "uuid": "5ef4d163-d944-498f-b8e9-b0a4cc36fdf9",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "b1480526-4282-4b31-a80d-1a9eb1d46b1e",
          "615424be-4af6-447f-8d43-62d2e59afe15",
          "553edc86-7bb1-44cf-9da9-65729f094c7f",
          "e5a74824-8f85-4fdf-8c70-a9fa1105d3fc",
          "29c23b62-4b8b-4250-8b0d-d32eb1efe975",
          "64982ed1-1bcf-403b-b13f-dd116da86c4a",
          "c6e4c96b-c8b8-4ff1-85ec-5623cd66b97c",
          "e2d9d3db-d064-4bd0-a8f5-0b04354ca6d0",
          "00ad8e19-8bd9-4393-b950-b4a37dedfae3",
          "5ef4d163-d944-498f-b8e9-b0a4cc36fdf9"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 5380,
        "root": false,
        "rootEmpty": false,
        "_timeout": 180000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 180000
  },
  "copyrightYear": 2020
}